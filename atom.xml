<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MirrorShih.github.io</title>
  
  
  <link href="https://mirrorshih.github.io/atom.xml" rel="self"/>
  
  <link href="https://mirrorshih.github.io/"/>
  <updated>2023-07-01T15:27:17.085Z</updated>
  <id>https://mirrorshih.github.io/</id>
  
  <author>
    <name>Mirror Shih</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>關於我學習資安的那些事</title>
    <link href="https://mirrorshih.github.io/post/%E9%97%9C%E6%96%BC%E6%88%91%E5%AD%B8%E7%BF%92%E8%B3%87%E5%AE%89%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B.html"/>
    <id>https://mirrorshih.github.io/post/%E9%97%9C%E6%96%BC%E6%88%91%E5%AD%B8%E7%BF%92%E8%B3%87%E5%AE%89%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B.html</id>
    <published>2022-03-23T07:47:30.000Z</published>
    <updated>2023-07-01T15:27:17.085Z</updated>
    
    <content type="html"><![CDATA[<p>相信有很多對資工領域有興趣或已就讀於相關科系的學生，或多或少的都有聽過資安或CTF這幾個字，想入門卻不得其道，今天這篇文章我想想談談我個人在資安領域摸索的小心得。</p><hr><h1 id="0x00-故事的開始"><a href="#0x00-故事的開始" class="headerlink" title="0x00 故事的開始"></a>0x00 故事的開始</h1><p>相信很多人對資訊安全沒什麼概念，但大家應該都聽過「駭客」這兩個字，沒錯，當年不熟悉資安的我也是對這樣的稱號充滿憧憬，對於這樣的學生，在剛觸碰資安技術時，會發生什麼呢？沒錯，就是嘗試尋找一些現成的網站打打看。在此我非常不推薦對於資安有興趣的新手跟當時的我做一樣的事情，不過這就是我當時開始的地方。  </p><hr><p>那時的我，第一個盯上的就是學校的網站，在當時，網站使用學生個人的相關資訊做為學生帳號的密碼，但學生的資料在很多地方是公開的，只要蒐集資料，再加以窮舉，就有機會以他人的身份登入系統（在此我也非常不推薦網站系統使用不可更改且跟使用者身份相關的預設密碼），大約一週後，我已經擁有校內絕大多數學生的登入權限。</p><hr><p>雖然我並不建議資安新手去隨便亂打網站，但我分享這個故事，是因為我覺得有一個很重要的觀點值得思考：當我手上有一些資訊，他看起來可能沒有很有用，但當我們從另一個角度看這些資訊，就能利用這些資訊達成目的。在經過了一個月的努力後，我更進一步的發現了當時系統甚至存在明文密碼以及權限管理不當的問題，甚至擁有上傳下載和修改網站資料的權限。</p><hr><h1 id="0x01-漏洞回報？攻擊結束的下一步"><a href="#0x01-漏洞回報？攻擊結束的下一步" class="headerlink" title="0x01 漏洞回報？攻擊結束的下一步"></a>0x01 漏洞回報？攻擊結束的下一步</h1><p>打完網站了，那……現在到底該做什麼？上一段提到的「駭客」，其實並不完全是大家想象中的攻擊者，利用漏洞從事不法行為的人，事實上駭客也是有分成利用漏洞的壞人和保護系統的好人，在系統設計之初就設計出一個安全的系統是非常困難的，因此我們需要請一些駭客來攻擊我們的網站，再將他們找出的漏洞修復，如果駭客發現了一些全新的攻擊手法，也可以將其公開分享，與世界各地的好手交流，讓往後的網路世界更加安全，因此駭客們也是保護我們資安的重要推手。當年的我依樣畫葫蘆做了一樣的事情，我將學校系統漏洞的問題反饋給我當時的班導，並透過他跟學校的相關處室談這件事，後來校方也將這個問題修復。</p><hr><h1 id="0x02-我也想入門資安，該怎麼做？"><a href="#0x02-我也想入門資安，該怎麼做？" class="headerlink" title="0x02 我也想入門資安，該怎麼做？"></a>0x02 我也想入門資安，該怎麼做？</h1><p>上文中我說我非常不推薦大家拿他人的網站練手，也有很多人根本連要怎麼上手都不了解，這邊我非常推薦可以先從打CTF開始。CTF全名是Capture The Flag，是模擬攻擊手法的一種遊戲，玩家可以分析漏洞並對其進行攻擊，成功後能夠獲得Flag，通常是一串文字，代表你成功解開這個精心設計的題目。雖然CTF並不能完全呈現現實世界攻防的情況，但作為培養資安知識的手段也非常足夠了。在一些更進階的CTF比賽中，出題者甚至能夠釋出那些需要思考全新攻擊手法才能夠解開的題目。關於CTF的其他細節我就不贅述太多，留給各位讀者自己摸索吧。（文末我會放一些適合新手的入門資訊）</p><hr><h1 id="0x03-故事的下一個篇章"><a href="#0x03-故事的下一個篇章" class="headerlink" title="0x03 故事的下一個篇章"></a>0x03 故事的下一個篇章</h1><p>事實上，現實世界中處處充滿了資安問題，即便你不是一個資安領域的研究者，也要對個人資安保護有一些基礎的知識。如今AI議題熱門，但即便是用AI解決問題也充斥了資安議題，近期也有很多研究是對深度學習的類神經網路進行攻擊，想象有一天你開自駕車出門，但卻因前方車輛的車牌被人惡意修改過，導致你的車並未發現前方車輛，就有可能發生意外，因此我認為資安議題會隨著時間不斷更新，永遠沒有結束的一天。近期我也打算投入類神經網路對惡意軟體檢測的研究，再從惡意軟體的角度來嘗試能否攻擊類神經網路，避開類神經網路的檢測。</p><hr><h1 id="0x04-學習資源"><a href="#0x04-學習資源" class="headerlink" title="0x04 學習資源"></a>0x04 學習資源</h1><ul><li>CTF<ul><li><a href="https://picoctf.org/">picoCTF</a></li></ul></li><li>學習資料<ul><li><a href="https://github.com/Hack-with-Github/Awesome-Hacking">Awesome-Hacking</a></li><li><a href="https://github.com/goodjack/awesome-cs-training">awesome-cs-training</a></li></ul></li><li>培訓活動<ul><li><a href="https://ais3.org/">AIS3</a></li><li><a href="https://isip.moe.edu.tw/">教育部資訊安全人才培育計畫</a></li></ul></li><li>競賽<ul><li><a href="https://csc.nccst.nat.gov.tw/">金盾獎</a></li></ul></li><li>社團<ul><li><a href="https://www.facebook.com/ntust.hacking/">台科資安社</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相信有很多對資工領域有興趣或已就讀於相關科系的學生，或多或少的都有聽過資安或CTF這幾個字，想入門卻不得其道，今天這篇文章我想想談談我個人在資安領域摸索的小心得。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;0x00-故事的開始&quot;&gt;&lt;a href=&quot;#0x00-故事的開始&quot; clas</summary>
      
    
    
    
    <category term="Security" scheme="https://mirrorshih.github.io/categories/Security/"/>
    
    
    <category term="Security" scheme="https://mirrorshih.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL 互動式水面</title>
    <link href="https://mirrorshih.github.io/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2.html"/>
    <id>https://mirrorshih.github.io/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2.html</id>
    <published>2022-02-06T08:48:18.000Z</published>
    <updated>2023-07-01T07:54:38.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>會想寫這篇文章其實有一個契機，我在讀<a href="https://madebyevan.com/webgl-water/">WebGL Water</a> 的source code時，其中有一段程式碼中提到了 ping-pong rendering，不過在我自己搜尋資料時卻發現相關的技術幾乎沒有人對它進行比較詳細的解釋，在跟朋友抱怨這件事後，他說：「既然沒有人寫那你就可以寫一篇阿。」於是這篇文章就這樣誕生了。雖然說是OpenGL互動式水面，但這篇文章不會將重點放在實作細節上，會有很大一部分是WebGL Water source code導讀。</p><h1 id="目標受衆"><a href="#目標受衆" class="headerlink" title="目標受衆"></a>目標受衆</h1><ul><li>OpenGL/WebGL新手，想了解用GL製作水面的方式</li><li>正在台科電腦圖學導論痛苦掙扎的你</li></ul><h1 id="先備知識"><a href="#先備知識" class="headerlink" title="先備知識"></a>先備知識</h1><p>在看這篇文章之前，最好對下列的技術有一定程度的了解：</p><ul><li>OpenGL/WebGL（廢話）</li><li>FrameBuffer Object</li><li>Shader</li></ul><hr><p>那就讓我們開始吧</p><h1 id="Height-map"><a href="#Height-map" class="headerlink" title="Height map"></a>Height map</h1><p>首先我們要引入一個概念<strong>Height map</strong>，Height map的概念是將一張圖片的顏色（ex:rgb）當作水面的高度，這裏我以一張灰階圖爲例<br><img src="/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2/water_gray.png"><br>我們先建一個有很多vertex的平面，將這張圖當作texture丟進vertex shader中，並在vertex shader中讀取這張圖的顏色（是灰階圖所以rgb相同，擇一即可），對當前的高度加上顏色的值，就能得到一個不平整的水面，這裏我們來看看WebGL Water是怎麼實作的</p><pre class="line-numbers language-none"><code class="language-none">uniform sampler2D water;varying vec3 position;void main() {vec4 info = texture2D(water, gl_Vertex.xy * 0.5 + 0.5);position = gl_Vertex.xzy;position.y += info.r;gl_Position = gl_ModelViewProjectionMatrix * vec4(position, 1.0);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用上圖面那張圖做出來的效果：<br><img src="/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2/water_gray_example.png"></p><p>想象如果我們擁有一連串的水流動的灰階圖，按照順序畫出來，就可以模擬出水流動的效果了！</p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">WARNING</p><p>如果想要對這個平面染上水的顏色<br>記得要算normal<br>對不同高度的地方染不同的顏色<br>否則人眼會很難看出高度差</p></div><h1 id="Picking"><a href="#Picking" class="headerlink" title="Picking"></a>Picking</h1><p>再來我們來談談OpenGL中要如何實作滑鼠選取的功能，在OpenGL中我們可以使用下列兩種做法：  </p><ul><li>Ray tracing</li><li>Shader</li></ul><p>閱讀WebGL Water的source code可以發現他是選擇第一種方式來做，但今天我們這篇文章會把重點放在第二種做法上。  </p><hr><p>先解釋一下兩者的差別，Ray tracing是從滑鼠點擊的位置打出一條ray，用那條ray跟場景上的物件的面做intersection來判斷ray打到的位置，在場景上有很多面需要做intersection時計算量就會增加，而且實作起來也不是很容易。</p><hr><p>再來就是今天要介紹的方法，這個方法使用Shader來達成，相信讀者看到這可能會有一個疑問，Shader不是用來輸出的嗎？？？沒錯，而我們就是要使用輸出顏色的方式來達成選取的功能。  </p><p>要怎麼做呢？<br>其實很簡單，<br>我們開一個FrameBuffer Object（以下簡稱FBO），在裏面畫上水的平面，但這次我們要在fragment shader中將顏色畫成平面的texture coordinate。  </p><p>如下圖所示<br><img src="/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2/water_pick.png"></p><pre class="line-numbers language-none"><code class="language-none">#version 430 coreout vec4 f_color;in V_OUT{   vec3 position;   vec3 normal;   vec2 texture_coordinate;} f_in;void main(){       vec3 color = vec3(f_in.texture_coordinate.x,f_in.texture_coordinate.y,0.1);    f_color = vec4(color, 1.0f);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再來我們我們使用glReadPixels()來讀取滑鼠點擊位置的顏色，就能夠判斷點到的位置在水面上的相對位置了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">glBindFramebuffer(GL_READ_FRAMEBUFFER, framebufferPick);glReadBuffer(GL_COLOR_ATTACHMENT0);glm::vec3 uv;glReadPixels(mouse_x, mouse_y, 1, 1, GL_RGB, GL_FLOAT, &amp;uv[0]);glReadBuffer(GL_NONE);glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p>在輸出顏色時我們選擇將b設成固定的0.1<br>並在每次畫FBO時glClearColor()將b設成0.0<br>後續判斷點擊的顏色時則可透過b的值來判斷是否有點擊到水面<br>若b值爲0.0則無<br>爲0.1則有</p></div><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">WARNING</p><p>在讀取滑鼠點擊位置的pixel時<br>要注意滑鼠的xy可能和水面貼圖的xy方向不一<br>需要根據情況調整傳入的滑鼠位置數值</p></div><h1 id="Ping-Pong-Rendering"><a href="#Ping-Pong-Rendering" class="headerlink" title="Ping-Pong Rendering"></a>Ping-Pong Rendering</h1><p>處理完點擊的功能了，接下來我們就來看看如何讓水產生漣漪吧。這裏就不得不提到此文誕生的原因，WebGL Water使用的ping-pong rendering。</p><hr><p>Ping-Pong Rendering其實是一個在實作上才需要使用的技術，今天我們想要計算水面漣漪的動態過程，我們需要前一張水面漣漪圖來當作下一張漣漪的輸入，透過前一張的高度來計算下一張的高度，Ping-Pong Rendering就是這個可以把每一次的畫面丟給下一次當輸入的技巧。<strong>江湖一點訣，講破毋值三仙錢。</strong>那我們就來看看要怎麼做吧。</p><hr><p>首先這個技巧的核心就是FBO render to texture的能力，我們會開兩個FBO，先畫FBO1，然後將FBO1輸出的那個texture丟到FBO2中當作輸入的texture，這時我們就能在FBO2中用shader來對前一張texture做想要的操作了。在FBO2中輸出的結果又可以丟回FBO1中當輸入，就像打乒乓球一樣。<br><img src="/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2/ping_pong.png"></p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p>Ping-Pong Rendering適用在後面的texture依賴前面texture的情況<br>舉一個常見的例子<br>Gaussian Blur就是使用Ping-Pong Rendering的好地方</p></div><h1 id="漣漪"><a href="#漣漪" class="headerlink" title="漣漪"></a>漣漪</h1><p>學會了Ping-Pong Rendering，我們終於可以來繪製漣漪了，我們來看看WebGL Water是怎麼實作的。</p><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">WARNING</p><p>如果你是使用OpenGL，<br>那此處需要注意你開的texture要可以進行浮點數運算，<br>在WebGL中他是使用gl.RGBA的形式，<br>但在OpenGL中要使用如GL_RGB32F的internal format</p></div><pre class="line-numbers language-none"><code class="language-none">uniform sampler2D texture;uniform vec2 delta;varying vec2 coord;void main() {  /* get vertex info */  vec4 info = texture2D(texture, coord);    /* calculate average neighbor height */  vec2 dx = vec2(delta.x, 0.0);  vec2 dy = vec2(0.0, delta.y);  float average = (    texture2D(texture, coord - dx).r +    texture2D(texture, coord - dy).r +    texture2D(texture, coord + dx).r +    texture2D(texture, coord + dy).r  ) * 0.25;    /* change the velocity to move toward the average */  info.g += (average - info.r) * 2.0;    /* attenuate the velocity a little so waves do not last forever */  info.g *= 0.995;    /* move the vertex along the velocity */  info.r += info.g;    gl_FragColor = info;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我們把這個shader當作剛剛提到的Ping-Pong Rendering繪製texture的fragment shader，每次都拿前一張的texture，找當前位置附近高度的平均來當作這次這個位置的高度。</p><hr><p>那現在我們可以模擬漣漪的流動過程了，所以我們需要加一個在滑鼠點擊時產生的漣漪，一樣來看WebGL Water是怎麼做的</p><pre class="line-numbers language-none"><code class="language-none">const float PI = 3.141592653589793;uniform sampler2D texture;uniform vec2 center;uniform float radius;uniform float strength;varying vec2 coord;void main() {  /* get vertex info */  vec4 info = texture2D(texture, coord);    /* add the drop to the height */  float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - coord) / radius);  drop = 0.5 - cos(drop * PI) * 0.5;  info.r += drop * strength;    gl_FragColor = info;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我們就可以產生漣漪了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">glBindFramebuffer(GL_READ_FRAMEBUFFER, framebufferPick);glReadBuffer(GL_COLOR_ATTACHMENT0);glm::vec3 uv;glReadPixels(mouse_x, mouse_y, 1, 1, GL_RGB, GL_FLOAT, &amp;uv[0]);glReadBuffer(GL_NONE);glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);if (uv.z != 0.0){    this-&gt;addDrop(glm::vec2(uv));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在addDrop function中，我們就把Ping-Pong Rendering那兩個FBO的texture拿出來用產生漣漪的shader畫一次，然後丟回去繼續update就可以了。<br><img src="/post/OpenGL-%E4%BA%92%E5%8B%95%E5%BC%8F%E6%B0%B4%E9%9D%A2/cover.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;會想寫這篇文章其實有一個契機，我在讀&lt;a href=&quot;https://madebyevan.com/webgl-water/&quot;&gt;WebGL </summary>
      
    
    
    
    <category term="Computer Graphics" scheme="https://mirrorshih.github.io/categories/Computer-Graphics/"/>
    
    
    <category term="Computer Graphics" scheme="https://mirrorshih.github.io/tags/Computer-Graphics/"/>
    
    <category term="OpenGL" scheme="https://mirrorshih.github.io/tags/OpenGL/"/>
    
  </entry>
  
</feed>
